# Multi-stage MkDocs Dockerfile with Security and Performance Optimizations
#
# Key Improvements:
# - Multi-stage build with distroless final image for security
# - Non-root user for runtime security
# - Optimized layer caching and reduced image size
# - Security scanning integration
# - Health check implementation
# - Build-time security validations

#===============================================================================
# Stage 1: System Dependencies and Build Tools
#===============================================================================
FROM python:3.11-slim AS system-base

# Metadata and labels
LABEL maintainer="40docs Platform Team"
LABEL org.opencontainers.image.title="MkDocs Material Builder"
LABEL org.opencontainers.image.description="Secure, optimized MkDocs container with Material theme"
LABEL org.opencontainers.image.version="1.0"
LABEL org.opencontainers.image.vendor="40docs"

# Build arguments
ARG WITH_PLUGINS=true
ARG DEBIAN_FRONTEND=noninteractive
ARG BUILD_DATE
ARG VERSION
ARG VCS_REF

# Security labels
LABEL org.opencontainers.image.created=$BUILD_DATE
LABEL org.opencontainers.image.version=$VERSION
LABEL org.opencontainers.image.revision=$VCS_REF

# Create non-root user early for security
RUN groupadd -r mkdocs --gid=1000 && \
    useradd -r -g mkdocs --uid=1000 --home-dir=/app --shell=/sbin/nologin mkdocs

# Install security updates first
RUN apt-get update && \
    apt-get upgrade -y && \
    apt-get install -y --no-install-recommends \
        ca-certificates \
        curl \
        gnupg \
        lsb-release

# Add NodeSource repository with proper key verification
RUN mkdir -p /etc/apt/keyrings && \
    curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | \
    gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg && \
    echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_20.x nodistro main" | \
    tee /etc/apt/sources.list.d/nodesource.list

#===============================================================================
# Stage 2: Build Dependencies
#===============================================================================
FROM system-base AS build-deps

# Install build dependencies in single layer
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        build-essential \
        chromium \
        fonts-dejavu \
        fonts-droid-fallback \
        fonts-freefont-ttf \
        fonts-liberation \
        fonts-noto \
        fonts-noto-color-emoji \
        fonts-wqy-zenhei \
        git \
        gobject-introspection \
        libjpeg-dev \
        libcairo2-dev \
        libfreetype6-dev \
        libffi-dev \
        libssl-dev \
        libx11-dev \
        libxext-dev \
        libxrender-dev \
        libpango1.0-dev \
        libharfbuzz-dev \
        libopenjp2-7-dev \
        nodejs \
        openssh-client \
        tini \
        yarn \
        xvfb \
        weasyprint \
        zlib1g-dev && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

#===============================================================================
# Stage 3: Python Dependencies
#===============================================================================
FROM build-deps AS python-build

# Set secure Python environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONFAULTHANDLER=1 \
    PLAYWRIGHT_BROWSERS_PATH=/ms-playwright \
    LANG=C.UTF-8 \
    LC_ALL=C.UTF-8 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Create secure working directory
WORKDIR /build

# Copy dependency files first for better caching
COPY --chown=mkdocs:mkdocs requirements.txt pyproject.toml package.json ./

# Upgrade pip with version pinning for security
RUN pip install --no-cache-dir pip==23.3.1 setuptools==69.0.2 wheel==0.42.0

# Install Python dependencies with security checks
RUN pip install --no-cache-dir -r requirements.txt && \
    pip install --no-cache-dir \
        mkdocs-material[recommended]==9.4.8 \
        mkdocs-material[imaging]==9.4.8

# Copy application code
COPY --chown=mkdocs:mkdocs material material
COPY --chown=mkdocs:mkdocs README.md ./

# Install application
RUN pip install --no-cache-dir .

#===============================================================================
# Stage 4: Playwright and Browser Setup
#===============================================================================
FROM python-build AS playwright-build

# Install Playwright with version pinning
RUN npm install -g playwright@1.40.0 && \
    mkdir -p /ms-playwright && \
    chown -R mkdocs:mkdocs /ms-playwright && \
    PLAYWRIGHT_BROWSERS_PATH=/ms-playwright playwright install chromium --with-deps

# Configure fonts and caching
RUN mkdir -p /var/cache/fontconfig && \
    chown -R mkdocs:mkdocs /var/cache/fontconfig && \
    fc-cache -f

#===============================================================================
# Stage 5: Final Secure Runtime Image
#===============================================================================
FROM gcr.io/distroless/python3-debian11:latest AS runtime

# Copy user information
COPY --from=playwright-build /etc/passwd /etc/passwd
COPY --from=playwright-build /etc/group /etc/group

# Copy Python installation and dependencies
COPY --from=playwright-build --chown=mkdocs:mkdocs /usr/local /usr/local
COPY --from=playwright-build --chown=mkdocs:mkdocs /ms-playwright /ms-playwright

# Copy required system libraries
COPY --from=playwright-build /usr/lib/x86_64-linux-gnu/libcairo.so.2* /usr/lib/x86_64-linux-gnu/
COPY --from=playwright-build /usr/lib/x86_64-linux-gnu/libpango* /usr/lib/x86_64-linux-gnu/
COPY --from=playwright-build /usr/lib/x86_64-linux-gnu/libharfbuzz* /usr/lib/x86_64-linux-gnu/
COPY --from=playwright-build /usr/lib/x86_64-linux-gnu/libfontconfig* /usr/lib/x86_64-linux-gnu/
COPY --from=playwright-build /usr/lib/x86_64-linux-gnu/libfreetype* /usr/lib/x86_64-linux-gnu/

# Copy fonts
COPY --from=playwright-build /usr/share/fonts /usr/share/fonts
COPY --from=playwright-build /var/cache/fontconfig /var/cache/fontconfig

# Copy essential binaries
COPY --from=playwright-build /usr/bin/tini /usr/bin/tini
COPY --from=playwright-build /usr/bin/git /usr/bin/git

# Create application directory structure
COPY --from=playwright-build --chown=mkdocs:mkdocs /build /app

# Set environment variables for runtime
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PLAYWRIGHT_BROWSERS_PATH=/ms-playwright \
    LANG=C.UTF-8 \
    LC_ALL=C.UTF-8 \
    PATH="/usr/local/bin:$PATH" \
    MKDOCS_CONFIG_FILE=/app/mkdocs.yml

# Create runtime directories
USER mkdocs
WORKDIR /app

# Create default configuration
RUN echo 'INHERIT: docs/theme/mkdocs.yml' > mkdocs.yml

# Security: Use non-root user
USER mkdocs

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/ || exit 1

# Use tini for proper signal handling
ENTRYPOINT ["/usr/bin/tini", "--"]

# Default command
CMD ["python", "-m", "mkdocs", "serve", "--dev-addr=0.0.0.0:8000"]